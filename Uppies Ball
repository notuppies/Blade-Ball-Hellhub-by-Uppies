if game.PlaceId == 13772394625 then
    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
    
    local Window = Rayfield:CreateWindow({
       Name = "Hell Hub",
       LoadingTitle = "Blade Ball Hub",
       LoadingSubtitle = "by notuppies",
       ConfigurationSaving = {
          Enabled = true,
          FolderName = nil,
          FileName = "Hubby Balls Uppies"
       },
       Discord = {
          Enabled = True,
          Invite = "3xmMKHB6",
          RememberJoins = true
       },
       KeySystem = true,
       KeySettings = {
          Title = "Hell Hub | Key",
          Subtitle = "Key In Discord",
          Note = "Join Hell Hub's Discord for the Key",
          FileName = "Hell Key",
          SaveKey = true,
          GrabKeyFromSite = true,
          Key = {"https://pastebin.com/raw/D3GJ8HjT"}
       }
    })
    
    local AutoFarm = Window:CreateTab("⚔️ Farm", nil) -- Title, Image
    local Main = MainTab:CreateSection("Farming")
    Rayfield:Notify({
       Title = "Script Executed",
       Content = "Welcome to Hell",
       Duration = 4,
       Image = nil,
       Actions = { -- Notification Buttons
          Ignore = {
             Name = "I'm Ready",
             Callback = function()
             print("Have fun little Imp")
          end
       },
    },
    })
    
    local Button = MainTab:CreateButton({
       Name = "AutoParry",
       Callback = function()
            local CoreGui = game:GetService("StarterGui")
    
    CoreGui:SetCore("SendNotification", {
        Title = "Blade Ball Auto Parry)";
        Text = "";
        Duration = 5;
    
        Button1 = "Yes";
    })
    
    
    local workspace = game:GetService("Workspace")
    local players = game:GetService("Players")
    local runService = game:GetService("RunService")
    local vim = game:GetService("VirtualInputManager")
    
    local ballFolder = workspace.Balls
    local indicatorPart = Instance.new("Part")
    indicatorPart.Size = Vector3.new(5, 5, 5)
    indicatorPart.Anchored = true
    indicatorPart.CanCollide = false
    indicatorPart.Transparency = 1
    indicatorPart.BrickColor = BrickColor.new("Bright red")
    indicatorPart.Parent = workspace
    
    local lastBallPressed = nil
    local isKeyPressed = false
    
    local function calculatePredictionTime(ball, player)
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local relativePosition = ball.Position - rootPart.Position
            local velocity = ball.Velocity + rootPart.Velocity 
            local a = (ball.Size.magnitude / 2) 
            local b = relativePosition.magnitude
            local c = math.sqrt(a * a + b * b)
            local timeToCollision = (c - a) / velocity.magnitude
            return timeToCollision
        end
        return math.huge
    end
    
    local function updateIndicatorPosition(ball)
        indicatorPart.Position = ball.Position
    end
    
    local function checkProximityToPlayer(ball, player)
        local predictionTime = calculatePredictionTime(ball, player)
        local realBallAttribute = ball:GetAttribute("realBall")
        local target = ball:GetAttribute("target")
        
        local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.magnitude * 0.01)
    
        if predictionTime <= ballSpeedThreshold and realBallAttribute == true and target == player.Name and not isKeyPressed then
            vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
            wait(0.005)
            vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
            lastBallPressed = ball
            isKeyPressed = true
        elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name) then
            isKeyPressed = false
        end
    end
    
    local function checkBallsProximity()
        local player = players.LocalPlayer
        if player then
            for _, ball in pairs(ballFolder:GetChildren()) do
                checkProximityToPlayer(ball, player)
                updateIndicatorPosition(ball)
            end
        end
    end
    
    runService.Heartbeat:Connect(checkBallsProximity)
       end,
    })
